name: Build and Deploy iOS App to TestFlight

on:
  push:
    branches:
      - your-new-branch-name  # Replace with your branch name

jobs:
  build-and-deploy:
    runs-on: macos-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set Up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.3'
          channel: stable
          architecture: x64

      - name: Install Flutter Dependencies
        run: flutter pub get

      - name: Ensure iOS Setup
        run: |
          if [ ! -d "ios" ] || [ ! -d ".ios" ]; then
            echo "iOS setup missing. Regenerating..."
            rm -rf ios .ios
            flutter create --platforms=ios --org com.atvandbuggy --project-name atvandbuggy_sales_app .
            flutter pub get
          fi
          cd ios
          # Create a minimal Podfile
          cat << EOF > Podfile
          platform :ios, '13.0'
          install! 'cocoapods', :deterministic_uuids => false
          target 'Runner' do
            use_frameworks!
            use_modular_headers!
          end
          post_install do |installer|
            installer.pods_project.targets.each do |target|
              target.build_configurations.each do |config|
                config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '13.0'
              end
            end
          end
          EOF
          # Force bundle ID
          cd Runner
          plutil -replace CFBundleIdentifier -string "com.atvandbuggy.atvandbuggy_sales_app" Info.plist
          cd ..
          sed -i '' 's/PRODUCT_BUNDLE_IDENTIFIER = "[^"]*"/PRODUCT_BUNDLE_IDENTIFIER = "com.atvandbuggy.atvandbuggy_sales_app"/g' Runner.xcodeproj/project.pbxproj

      - name: Install CocoaPods
        run: |
          sudo gem install cocoapods -v 1.15.2
          cd ios
          pod install --repo-update

      - name: Setup Signing Certificates and Profiles
        env:
          DEVELOPMENT_PROFILE_BASE64: ${{ secrets.DEVELOPMENT_PROFILE_BASE64 }}
          DISTRIBUTION_PROFILE_BASE64: ${{ secrets.DISTRIBUTION_PROFILE_BASE64 }}
          CERTIFICATE_P12_BASE64: ${{ secrets.CERTIFICATE_P12_BASE64 }}
          CERTIFICATE_PASSWORD: ${{ secrets.CERTIFICATE_PASSWORD }}
        run: |
          # Create keychain
          security create-keychain -p "temp" build.keychain
          security unlock-keychain -p "temp" build.keychain
          security set-keychain-settings -t 3600 build.keychain
          security default-keychain -s build.keychain
          # Import certificate
          echo "$CERTIFICATE_P12_BASE64" | base64 --decode > certificate.p12
          security import certificate.p12 -k build.keychain -P "$CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          # Install provisioning profiles
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          echo "$DEVELOPMENT_PROFILE_BASE64" | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/development.mobileprovision
          echo "$DISTRIBUTION_PROFILE_BASE64" | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/distribution.mobileprovision
          ls -lh ~/Library/MobileDevice/Provisioning\ Profiles/

      - name: Debug Signing Setup
        run: |
          cd ios
          echo "Bundle ID in Info.plist:"
          plutil -p Runner/Info.plist | grep CFBundleIdentifier
          echo "Xcode project settings:"
          grep -i "PRODUCT_BUNDLE_IDENTIFIER" Runner.xcodeproj/project.pbxproj
          echo "Installed profiles:"
          security find-identity -v -p codesigning build.keychain
          ls -lh ~/Library/MobileDevice/Provisioning\ Profiles/

      - name: Build iOS App
        run: |
          cd ios
          xcrun xcodebuild -workspace Runner.xcworkspace \
            -scheme Runner \
            -sdk iphoneos \
            -configuration Release \
            -archivePath $GITHUB_WORKSPACE/build/Runner.xcarchive \
            clean archive \
            CODE_SIGN_IDENTITY="iPhone Developer" \
            PROVISIONING_PROFILE="$(uuidgen ~/Library/MobileDevice/Provisioning\ Profiles/development.mobileprovision)" \
            -verbose

      - name: Export and Upload to TestFlight
        env:
          API_KEY_ID: ${{ secrets.API_KEY_ID }}
          API_ISSUER_ID: ${{ secrets.API_ISSUER_ID }}
          API_KEY_BASE64: ${{ secrets.API_KEY_BASE64 }}
        run: |
          cd ios
          # Decode API key
          echo "$API_KEY_BASE64" | base64 --decode > /tmp/authkey.p8
          # Create ExportOptions.plist
          cat << EOF > ExportOptions.plist
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>method</key>
              <string>app-store</string>
              <key>signingCertificate</key>
              <string>iPhone Distribution</string>
              <key>signingStyle</key>
              <string>manual</string>
              <key>provisioningProfiles</key>
              <dict>
                  <key>com.atvandbuggy.atvandbuggy_sales_app</key>
                  <string>$(uuidgen ~/Library/MobileDevice/Provisioning\ Profiles/distribution.mobileprovision)</string>
              </dict>
              <key>destination</key>
              <string>upload</string>
          </dict>
          </plist>
          EOF
          # Export and upload
          xcrun xcodebuild -exportArchive \
            -archivePath $GITHUB_WORKSPACE/build/Runner.xcarchive \
            -exportOptionsPlist ExportOptions.plist \
            -exportPath $GITHUB_WORKSPACE/build \
            -authenticationKeyPath /tmp/authkey.p8 \
            -authenticationKeyID "$API_KEY_ID" \
            -authenticationKeyIssuerID "$API_ISSUER_ID" \
            -verbose
