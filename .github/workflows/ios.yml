name: Build and Deploy iOS App to TestFlight

on:
  push:
    branches:
      - your-new-branch-name  # Replace with your branch name

jobs:
  build-and-deploy:
    runs-on: macos-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set Up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.3'
          channel: stable
          architecture: x64

      - name: Install Flutter Dependencies
        run: flutter pub get

      - name: Ensure iOS Setup
        run: |
          if [ ! -d "ios" ] || [ ! -d ".ios" ]; then
            echo "iOS setup missing. Regenerating..."
            rm -rf ios .ios
            flutter create --platforms=ios --org com.atvandbuggy --project-name atvandbuggy_sales_app .
            flutter pub get
          fi
          cd ios
          # Create a minimal Podfile for Flutter
          cat << EOF > Podfile
          platform :ios, '13.0'
          install! 'cocoapods', :deterministic_uuids => false
          target 'Runner' do
            use_frameworks!
            use_modular_headers!
          end
          post_install do |installer|
            installer.pods_project.targets.each do |target|
              target.build_configurations.each do |config|
                config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '13.0'
              end
            end
          end
          EOF
          # Set consistent bundle ID in Info.plist
          cd Runner
          plutil -replace CFBundleIdentifier -string "com.atvandbuggy.atvandbuggy_sales_app" Info.plist
          # Update bundle ID in project file
          cd ..
          sed -i '' 's/PRODUCT_BUNDLE_IDENTIFIER = "[^"]*"/PRODUCT_BUNDLE_IDENTIFIER = "com.atvandbuggy.atvandbuggy_sales_app"/g' Runner.xcodeproj/project.pbxproj

      - name: Install CocoaPods
        run: |
          sudo gem install cocoapods -v 1.15.2
          cd ios
          pod install --repo-update

      - name: Setup App Store Connect API Key
        env:
          API_KEY_BASE64: ${{ secrets.API_KEY_BASE64 }}
        run: |
          echo "$API_KEY_BASE64" | base64 --decode > /tmp/authkey.p8
          if [ ! -s /tmp/authkey.p8 ]; then
            echo "Error: Decoded API key file is empty or invalid."
            exit 1
          fi
          ls -lh /tmp/authkey.p8  # Verify file exists

      - name: Debug Xcode Project Settings
        run: |
          cd ios
          echo "Bundle ID in Info.plist:"
          plutil -p Runner/Info.plist | grep CFBundleIdentifier
          echo "Xcode project settings:"
          grep -i "PRODUCT_BUNDLE_IDENTIFIER\|DEVELOPMENT_TEAM" Runner.xcodeproj/project.pbxproj || echo "No matches found"

      - name: Build iOS App
        env:
          DEVELOPMENT_TEAM: ${{ secrets.DEVELOPMENT_TEAM }}
        run: |
          cd ios
          # Set up keychain for signing
          security create-keychain -p "temp" build.keychain
          security unlock-keychain -p "temp" build.keychain
          security set-keychain-settings -t 3600 build.keychain
          security default-keychain -s build.keychain
          # Ensure team ID in project file
          sed -i '' "s/DEVELOPMENT_TEAM = \"\"/DEVELOPMENT_TEAM = \"$DEVELOPMENT_TEAM\"/g" Runner.xcodeproj/project.pbxproj
          # Build the archive
          xcrun xcodebuild -workspace Runner.xcworkspace \
            -scheme Runner \
            -sdk iphoneos \
            -configuration Release \
            -archivePath $GITHUB_WORKSPACE/build/Runner.xcarchive \
            clean archive \
            CODE_SIGN_STYLE="Automatic" \
            DEVELOPMENT_TEAM="$DEVELOPMENT_TEAM" \
            -allowProvisioningUpdates \
            -verbose

      - name: Export and Upload to TestFlight
        env:
          DEVELOPMENT_TEAM: ${{ secrets.DEVELOPMENT_TEAM }}
          API_KEY_ID: ${{ secrets.API_KEY_ID }}
          API_ISSUER_ID: ${{ secrets.API_ISSUER_ID }}
        run: |
          cd ios
          # Create ExportOptions.plist
          cat << EOF > ExportOptions.plist
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>method</key>
              <string>app-store</string>
              <key>teamID</key>
              <string>$DEVELOPMENT_TEAM</string>
              <key>signingStyle</key>
              <string>automatic</string>
              <key>destination</key>
              <string>upload</string>
          </dict>
          </plist>
          EOF
          # Export and upload
          xcrun xcodebuild -exportArchive \
            -archivePath $GITHUB_WORKSPACE/build/Runner.xcarchive \
            -exportOptionsPlist ExportOptions.plist \
            -exportPath $GITHUB_WORKSPACE/build \
            -allowProvisioningUpdates \
            -authenticationKeyPath /tmp/authkey.p8 \
            -authenticationKeyID "$API_KEY_ID" \
            -authenticationKeyIssuerID "$API_ISSUER_ID" \
            -verbose
