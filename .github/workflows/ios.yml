name: Build and Deploy iOS App to TestFlight
on:
  push:
    branches:
      - your-new-branch-name

jobs:
  build-and-deploy:
    name: Build and Deploy iOS
    runs-on: macos-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set Up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.3'
          channel: stable
          architecture: x64

      - name: Install Flutter Dependencies
        run: |
          flutter pub get

      - name: Ensure iOS Setup
        run: |
          # If ios or .ios is missing, regenerate them
          if [ ! -d "ios" ] || [ ! -d ".ios" ]; then
            echo "iOS setup missing. Regenerating..."
            rm -rf ios .ios
            flutter create --platforms=ios --org com.atvandbuggy --project-name atvandbuggy_sales_app .
            flutter pub get
          fi
          # Move to ios directory and ensure Podfile has platform :ios, '13.0'
          cd ios
          if [ -f "Podfile" ]; then
            echo "Ensuring Podfile has platform :ios, '13.0'"
            sed -i '' "/platform :ios/d" Podfile # Remove any existing platform line
            echo "platform :ios, '13.0'" | cat - Podfile > temp && mv temp Podfile # Prepend platform line
          else
            echo "Creating new Podfile with platform :ios, '13.0'"
            echo "platform :ios, '13.0'" > Podfile
            echo "install! 'cocoapods', :deterministic_uuids => false" >> Podfile
            echo "target 'Runner' do" >> Podfile
            echo "  use_frameworks!" >> Podfile
            echo "  use_modular_headers!" >> Podfile
            echo "  flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))" >> Podfile
            echo "end" >> Podfile
          fi

      - name: Install CocoaPods
        run: |
          sudo gem install cocoapods -v 1.15.2
          pod --version

      - name: Install Pods
        run: |
          cd ios
          pod install --repo-update

      - name: Setup Signing Certificate
        env:
          CERTIFICATE_P12: ${{ secrets.CERTIFICATE_P12 }}
          CERTIFICATE_PASSWORD: ${{ secrets.CERTIFICATE_PASSWORD }}
        run: |
          # Debug: Check if secrets are set and non-empty
          echo "Checking secrets..."
          if [ -z "${CERTIFICATE_P12+x}" ] || [ -z "$CERTIFICATE_P12" ]; then
            echo "Error: CERTIFICATE_P12 is unset or empty. Set CERTIFICATE_P12 in GitHub secrets with a valid base64-encoded .p12 file."
            exit 1
          else
            echo "CERTIFICATE_P12 is set (length: ${#CERTIFICATE_P12})"
          fi
          echo "CERTIFICATE_PASSWORD is ${CERTIFICATE_PASSWORD:-'not set (optional)'}"

          # Import certificate into the default login keychain
          echo "$CERTIFICATE_P12" | base64 --decode > certificate.p12
          if [ ! -s certificate.p12 ]; then
            echo "Error: Decoded certificate.p12 is empty or invalid. Ensure CERTIFICATE_P12 contains a valid base64-encoded .p12 file."
            exit 1
          fi
          security import certificate.p12 -k ~/Library/Keychains/login.keychain-db -P "${CERTIFICATE_PASSWORD:-}" -T /usr/bin/codesign

          # Verify certificate import
          security find-identity -v -p codesigning ~/Library/Keychains/login.keychain-db

      - name: Build iOS App
        env:
          DEVELOPER_DIR: /Applications/Xcode_15.4.app/Contents/Developer
        run: |
          cd ios
          # Ensure provisioning profile is in place
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          echo "${{ secrets.PROVISIONING_PROFILE_BASE64 }}" | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/profile.mobileprovision

          xcodebuild -workspace Runner.xcworkspace \
            -scheme Runner \
            -sdk iphoneos \
            -configuration Release \
            -archivePath $GITHUB_WORKSPACE/build/Runner.xcarchive \
            archive \
            CODE_SIGN_STYLE="Manual" \
            CODE_SIGN_IDENTITY="iPhone Distribution" \
            PROVISIONING_PROFILE="${{ secrets.PROVISIONING_PROFILE_UUID }}" \
            DEVELOPMENT_TEAM="T72CZ82T9L" \
            -allowProvisioningUpdates

      - name: Export IPA
        run: |
          cd ios
          cat << EOF > ExportOptions.plist
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>method</key>
              <string>app-store</string>
              <key>teamID</key>
              <string>T72CZ82T9L</string>
              <key>uploadBitcode</key>
              <false/>
              <key>compileBitcode</key>
              <false/>
              <key>uploadSymbols</key>
              <true/>
              <key>signingStyle</key>
              <string>manual</string>
              <key>provisioningProfiles</key>
              <dict>
                  <key>com.atvandbuggy.atvandbuggy_sales_app</key>
                  <string>${{ secrets.PROVISIONING_PROFILE_UUID }}</string>
              </dict>
          </dict>
          </plist>
          EOF

          xcodebuild -exportArchive \
            -archivePath $GITHUB_WORKSPACE/build/Runner.xcarchive \
            -exportOptionsPlist ExportOptions.plist \
            -exportPath $GITHUB_WORKSPACE/build \
            -allowProvisioningUpdates

      - name: Deploy to TestFlight
        env:
          APPLE_ID_USERNAME: ${{ secrets.APPLE_ID_USERNAME }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
        run: |
          xcrun altool --upload-app \
            -f $GITHUB_WORKSPACE/build/Runner.ipa \
            -t ios \
            -u "$APPLE_ID_USERNAME" \
            -p "$APPLE_ID_PASSWORD"
